# 70. Climbing Stairs 

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

## Approach 

Inspiration from Discrete Structures with solutions mirroring a strong induction. 

First identify the base cases, and use the base cases in order to produce every result afterwards. 
We have the base cases being 1, 2, and 3. 

Need a place to store them and retrieve them -> Ues an array 

## My Solution 

````java
class Solution {
    public int climbStairs(int n) {
        int[] base = new int[n];
        int sum = 0; 
        int index = 3; 
        if (n < 4) {
            return n; 
        } else {
            base[0] = 1;
            base[1] = 2; 
            base[2] = 3; 
            while (index < n) {
                sum = base[index - 1] + base[index - 2]; 
                base[index] = sum;  
                index++; 
            }
            return sum; 
        }
    }
}
````

## Submission Details  

| <!-- -->    | <!-- --> | <!-- -->                             |
|-------------|----------|--------------------------------------|
| **Runtime** | 0ms      | Faster than 100% of Java submissions | 
| **Memory**  | 39 MB    | Less than 49.04% of Java submissions |









